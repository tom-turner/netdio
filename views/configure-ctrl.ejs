
<div class="hidden h-screen w-full bg-black opacity-80 absolute spinner text-white ">

	<span class="flex flex-col space-y-4">

		<p class="text-center mt-10"> Configuration received</p>

		<svg class="w-10 mx-auto animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
			<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
			<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
		</svg>

	</span>

</div>


<div class="flex items-center justify-center h-screen bg-blue-800 bg-opacity-30 flex flex-col p-4 space-y-2">

<div class="w-full bg-white rounded shadow-lg flex  p-2 px-4 flex-col">
	<div class="justify-between flex w-full">
		<p>Settings:</p>
		<img id="settings-gear" class="w-6 cursor-pointer transform duration-500" onclick="toggleSettings('settings','settings-gear')" src="images/gear.svg"/>
	</div>

	<div id="settings" class="w-full hidden pt-1">
		<span class="flex flex-col space-y-1">

				<label>Name:</label>
				<input id="unitName" class="border rounded" type="text">
				<label>IP Address:</label>
				<input id="ipAddress" class="border rounded" type="text">

			<button id="configure" class="button border px-2 rounded text-white bg-blue-600">Configure</button>
			<button id="restart" class="button border px-2 rounded text-grey-400 bg-white">Restart</button>
		</span>
	</div>

</div>

<div class="w-full bg-white rounded shadow-lg flex  p-2 px-4 flex-col">
	<div class="justify-between flex w-full">
		<p>Devices:</p>
		<img id="routing-gear" class="w-6 cursor-pointer transform duration-500" onclick="toggleSettings('routing','routing-gear')" src="images/gear.svg"/>
	</div>
</div>
	<div id="routing" class="flex flex-row h-screen justify-between w-full space-x-2 hidden">

		<div class="flex rounded shadow-lg flex-col p-4 bg-white w-1/2">
			<h2 class="text-center"> Inputs </h2>
			<ul id="inputs" class="border rounded h-full">

			</ul>
			
		</div>


		<div class="flex rounded shadow-lg flex-col p-4 bg-white w-1/2">
			<h2 class="text-center"> Destinations </h2>
			<ul id="destinations" class="border rounded h-full">

			</ul>
		</div>

	</div>

	<div id="zone" class="flex flex-col h-screen w-full bg-white rounded shadow-lg p-2 px-4">
		<div class="justify-between flex w-full">
			<p>Zone Control:</p>
			<img id="routing-gear" class="w-6 cursor-pointer transform duration-500" onclick="location.reload()" src="images/reload.svg"/>
		</div>

		<div class="h-full py-2">
			<ol id="zones" class="border rounded h-full flex flex-col">

			</ol>
		</div>
	</div>

</div>

<script type="text/javascript">

	var socket = io();
	var inputDevices = [];

	function loading(isLoading) {
		if (isLoading) {
			document.querySelector(".button").disabled = true;
			document.querySelector(".spinner").classList.remove("hidden");

		} else {
			document.querySelector(".button").disabled = false;
			document.querySelector(".spinner").classList.add("hidden");
		}
	}

	function toggleSettings(id, button) {
		document.getElementById(id).classList.toggle("hidden")
		document.getElementById(button).classList.toggle("rotate-180")
	}

	function createZone(zone) {
		
		console.log(zone)

		var inputOptions = getInputOptions()

		return	$(`<li id="${zone.ip}" class="bg-blue-400 bg-opacity-20 hover:bg-opacity-10 border rounded flex flex-col p-2 m-2" />`).append(
            		$('<div class="flex flex-col"/>').append(
              			$('<div class"w-full flex flex-row justify-between"/>').append(
              				$('<span class="font-bold" />').text(zone.name)
              			),
              			$(`<input type="range" class="w-full" value="${zone.volume}" oninput="edit('volume', this)"/>`),
              			inputOptions
            		)
        		)
	}

	function getInputOptions(){

		var select = $(`<select id="input" class="rounded my-2" onchange="edit('source', this)"/>`) .append($('<option value=""/>').text("-Mute-"))

		for (input of inputDevices) {
			console.log(1, input)
			select.append(
				$(`<option value="${input.source}"/>`).text(input.name)
			)
		}

		return select
	}

	function createDeviceLi(device) {

		console.log(device)

		return	$('<li id="'+ device.ip + '" class="border rounded flex flex-col md:flex-row px-2 py-1 m-2 justify-between space-x-2"/>').append(
					$('<div class="flex flex-row space-x-2"/>').append(
						$('<label />').text("Name: "),
						$(`<input type="text" class="w-full font-bold" value="${device.name}" onkeyup="edit('name', this)"/>`)
					),
					$('<div class="flex flex-row space-x-2 hidden"/>').append(
						$('<lable/>').text("IP: "),
						$(`<p type="text" class="w-full"/>`).text(device.ip)
					),
					$(`<button class="text-white rounded-full px-2 bg-blue-600" value="true" onclick="edit('blink' , this)" />`).text("Blink")
				)
	}


	function edit(type, input){
		
		message = {
			ip : input.closest('li').id,
			type : type, 
			value : input.value 
		}
		console.log(message)
		socket.emit('forward', message)
	}



	// listens for devices
	socket.on("devices", (devices) => {


		console.log("device", devices)

		$('#zones').html('')
		$('#destinations').html('')
		$('#inputs').html('')

		for (device of devices) {

			if(device.type === 'rx') {
				$('#destinations').html('')

				var zone = createZone(device)
				$('#zones').append(zone)

				var li = createDeviceLi(device)
				$('#destinations').append(li)
			}
			if(device.type === 'tx') {

				inputDevices.push(device)
				var li = createDeviceLi(device)
				$('#inputs').append(li)
			}
		}
	})
	
		// receives config on page load
	socket.on("config", (config) => {	
		loading(false)
		console.log("config: ", config)
		document.getElementById("ipAddress").value = config.ip;
		document.getElementById("unitName").value = config.name;
	});

	// listens for new config
	socket.on("newConfig", (config) => {
		loading(true)
		setTimeout(function(){
			window.location.href = "http://" + config.ip + ":5000"
		}, 2000);
	})

	$('#configure').on("click" , function() {
		loading(true)
		var config = {
			name : document.getElementById("unitName").value,
			ip : document.getElementById("ipAddress").value
		}
		socket.emit("config", config)
	})

	$('#restart').on("click" , function() {
		socket.emit("restart")
		loading(true)
	})

</script>