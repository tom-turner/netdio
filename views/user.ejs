
<div class="hidden h-screen w-full bg-black opacity-80 absolute spinner text-white z-10">

	<span class="flex flex-col space-y-4">

		<p class="text-center mt-10 hidden"> Configuration received</p>

		<svg class="w-10 mt-10 mx-auto animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
			<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
			<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
		</svg>

	</span>

</div>

<div class="flex items-center justify-center h-screen blue flex flex-col p-4 space-y-2 relative">

	<div id="zone" class="flex flex-col h-screen w-full bg-white rounded-md shadow-md pt-2 px-4 overflow-hidden border">
		<div class="justify-between flex w-full">
			<img class="h-14 my-auto py-2" src="images/logo"/>
			<img id="duck" class="h-12 my-auto cursor-pointer" src="images/duck.svg"/>
			<svg id="reload" class="hidden h-10 w-10 my-auto cursor-pointer transform duration-500 fill-current blue-fill" >
				<use xlink:href="images/reload.svg#reload"/>
			</svg>
		</div>

		<div class="h-full overflow-auto">
			<ol id="zones" class="h-full flex flex-col">

			</ol>
		</div>

		<div id="player" class="flex overflow-hidden transition-all duration-250 absolute bottom-6 h-0 w-full rounded-md left-0 max-h-36">
			<div class="flex mx-auto max-w-md max-h-44">
			<%- include('player/playbar.ejs')%>
			</div>
		</div>
		<div id="swipeup" class="w-full left-0 h-12 bottom-0 absolute"></div>
	</div>


</div>

<script type="text/javascript">
	loadHandlers()
	loading(true)

	function loading(isLoading) {
		if (isLoading) {
			document.querySelector(".spinner").classList.remove("hidden");

		} else {
			document.querySelector(".spinner").classList.add("hidden");
		}
	}

	function getInputAsOption(device){
		return $(`<option value="${device.source}" data-tx='${JSON.stringify(device)}' name="${device.ip}"/>`).text(device.name)
	}

	function createZone(zone) {
		
		var source = zone.source ? 'Input: ' + zone.source.name : 'Input: -Mute-'

		return	$(`<li id="${zone.ip}" class="bg-white shadow-sm border-2 rounded-lg flex flex-col p-2 my-1" />`).append(
            		$('<div class="flex flex-col space-y-1 w-full"/>').append(
              			$('<div class"flex flex-row justify-between relative"/>').append(
              				$('<span class="font-bold" />').text(zone.name),
              				$(`<select data-rx='${JSON.stringify(zone)}' class="rounded zoneinput bg-white absolute right-10 mt-1" />`) .append(getInputAsOption({
              					name : "-Mute-",
              					source : "muted"
              				}), 
              				($('<option disabled selected/>').text(`${source}`))
              			)
              			),
              			$(`<input type="range" class="w-full rounded-lg overflow-hidden appearance-none blue rounded-50 h-10" value="${zone.volume}" />`)
            		)
        		)
	}

	function createDeviceLi(device) {

		return	$('<li id="'+ device.ip + '" class="bg-white shadow-lg border rounded flex flex-row p-2 my-2 md:space-x-2 justify-between sm:pr-10 md:pr-8 lg:pr-2 pr-4"/>').append(
					$('<div class="flex flex-row space-x-2"/>').append(
						$('<label />').text("Name: "),
						$(`<input type="text" class="w-full font-bold" name="${device.type}.name" value="${device.name}"/>`)
					),
					$('<div class="flex flex-row space-x-2"/>').append(
						$(`<button class="text-white rounded-full px-2 blue hidden sm:inline" value="true" name="blink"/>`).text("Blink"),
						$(`<img class="flex flex-row space-x-2 h-8 cursor-pointer" src="images/gear.svg" onclick="window.open('http://${device.ip}:5000/settings')"/>`)
					)
				)
	}

	function updateDevices(devices) {
		$('#zones').html('')
		$('#destinations').html('')
		$('#inputs').html('')

		var rxDevices = []
		var txDevices = []
		
		for (device of devices) {
			if (device.rx) {
				var rx = device.rx
				rx.source = device.source
				rx.ip = device.device.id
				rxDevices.push(rx)
			}
			if (device.tx) {
				var tx = device.tx
				tx.ip = device.device.id
				txDevices.push(tx)
			}
			if (device.player) {
				var player = device.player
				player.ip = device.device.id
				txDevices.push(player)
			}
		}
		

		for (rx of rxDevices) {
			var zone = createZone(rx)
			var li = createDeviceLi(rx)
			$('#zones').append(zone)
			$('#destinations').append(li)
		}
			
		for (tx of txDevices) {
			var li = createDeviceLi(tx)
			$('#inputs').append(li)
			$('.zoneinput').append(getInputAsOption(tx))
		}

		loadHandlers()
		loading(false)
		
	}

let localDeviceListJSON = {}
let readyState = true

let readyStateToggle = () => {
	readyState = false
	setTimeout(()=>{
		readyState = true
	},7500)
}

socket.on('devices', (message) => {
	let messageJSON = JSON.stringify(message)
	let localJSON = localDeviceListJSON
	
	if(messageJSON == localJSON){
		readyStateToggle()
	}
	if(readyState){
		localDeviceListJSON = JSON.stringify(message)
		updateDevices(JSON.parse(localDeviceListJSON))
	}
})


let postMessage = async (url, message) => {
	readyStateToggle()
	let res = await fetch( url , {
        method:'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(message) 
      })

      let response = await res.json()  

      if(response.successful) {
      }
}

let quack = () => {
	new Audio('quack.mp3').play();
}

function loadHandlers(){
	
	$('select').on('change', function () {
		var message = {
			ip : this.closest('li').id,
			type : 'source', 
			value : {
				send: $('option:selected',this).attr('name'),
				socket: $('option:selected',this).val(),
				name: $('option:selected',this).text(),
				recv: this.closest('li').id,
				txdata: $('option:selected',this).data(),
			},
		}
		postMessage('forward', message)
	})

	$('input[type=range]').on('input', function () {
		var message = {
			ip : this.closest('li').id,
			type : 'rx.volume', 
			value : this.value
		}

		postMessage('forward', message)

	})
	$('input[type=text]').on('keyup', function () {

		var message = {
			ip : this.closest('li').id,
			type : this.name, 
			value : this.value
		}

		postMessage('forward', message)
	})
	$('button').on('click', function () {

		var message = {
			ip : this.closest('li').id,
			type : this.name, 
			value : this.value
		}

		postMessage('forward', message)
	})

	$('#reload').on('click' , function(){
		loading(true)
		postMessage('reload')
		setTimeout( () => {
			location.reload()
		}, 1000)
	})

	let clickcount = 0
	$('#duck').on('click' , function (){
		clickcount = clickcount + 1
		setTimeout( function (){
			clickcount = 0
		}, 1000)
		if (clickcount >= 2) {
			window.location.href = '/settings'
		}
	})

/*
	let trackdata = false
	socket.on("trackData", (track) => {
		$('#services').hide()
		trackdata = true
		$('#player').addClass('h-36')
		setTimeout(()=>{
			$('#player').removeClass('h-36')
		},3000)
	})
*/
	$('#swipeup').on('click', function (){
		$(trackdata ? '#player' : '#services').addClass('h-full')
		$(trackdata ? '#player' : '#services').removeClass('h-0')
		$('#swipeup').addClass('hidden')
	})
	$('#zones').on('click', function (){
		
		$(trackdata ? '#player' : '#services').removeClass('h-full')
		$(trackdata ? '#player' : '#services').addClass('h-0')
		$('#swipeup').removeClass('hidden')
	})

}

</script>