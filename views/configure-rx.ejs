
<div class="hidden h-screen w-full bg-black opacity-80 absolute spinner text-white">

	<span class="flex flex-col space-y-4">

		<p class="text-center mt-10"> Configuration received</p>

		<svg class="w-10 mx-auto animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
			<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
			<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
		</svg>

	</span>

</div>

<div class="flex items-center justify-center h-screen bg-blue-800 bg-opacity-30">

	<div class="flex rounded shadow-lg flex-col p-4 bg-white w-full max-w-lg mx-4">
		<label>Name: </label>
		<input name="name" id="unitName" type="text" class="border rounded"/>
		<br>

		<label>Input Source:</label>
		<select name="source" id="source" type="number" class="border rounded">
			<option selected disabled>-Select-</option>
		</select>

		<br>

		<label>Volume:</label>
		<input id="volume" type="range">

		<br>




		<span class="flex flex-col space-y-2">
			<label>IP Address:</label>
			<input id="ipAddress" class="border rounded" type="text">
			<button id="configure" class="button border px-2 rounded text-white bg-blue-600">Configure</button>
			<button id="restart" class="button border px-2 rounded text-grey-400 bg-white">Restart</button>
		</span>
	</div>
</div>

<script type="text/javascript">

	var socket = io();

	function loading(isLoading) {
		if (isLoading) {
			document.querySelector(".button").disabled = true;
			document.querySelector(".spinner").classList.remove("hidden");

		} else {
			document.querySelector(".button").disabled = false;
			document.querySelector(".spinner").classList.add("hidden");
		}
	}

	// lists all for devices
	socket.on("devices", (devices) => {

		for (device of devices) {

			if(device.type === 'tx') {

				var option = $(`<option id="${device.source}" value="${device.source}"/>`).text(device.name)

				$('#source').append(option)
			}
		}

	})


	// receives config on page load
	socket.on("config", (config) => {	
		loading(false)
		console.log("config: ", config)
		document.getElementById("ipAddress").value = config.ip;
		document.getElementById("unitName").value = config.name;
		document.getElementById("volume").value = config.volume;	
		if (config.source) {
			var id = config.source.value.toString()
			document.getElementById(id).selected = 'selected'
		}
	});

	// listens for new config
	socket.on("newConfig", (config) => {
		loading(true)
		setTimeout(function(){
			window.location.href = "http://" + config + ":5000"
		}, 2000);
	})


	$('#volume').on("input" , () => {

		var message = {
			value: $('#volume').val()
		}

		socket.emit('volume', message)
		
	})

	$('#source').on("input" , () => {

		var message = {
			value : $('#source').val(),
			name : $('#source option:selected').text(),
		}
		socket.emit('source', message)
	})


	$('#unitName').on("input" , () => {
		var message = {
			type: 'name', 
			value: $('#unitName').val()
		}
		socket.emit('setConfig', message)	
	})

	$('#configure').on("click" , function() {
		loading(true)
		var message = {
			type : 'ip',
			value : $('#ipAddress').val()
		}
		socket.emit("setConfig", message)
	})

	$('#restart').on("click" , function() {
		socket.emit("restart")
		loading(true)
	})


</script>