
<div class="hidden h-screen w-full bg-black opacity-80 absolute spinner text-white z-10">

	<span class="flex flex-col space-y-4">

		<p class="text-center mt-10"> Configuration received - this could up to 30 seconds</p>

		<svg class="w-10 mx-auto animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
			<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
			<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
		</svg>

	</span>

</div>


<div class="flex items-center justify-center h-screen blue flex flex-col p-4">

	<div class="w-full bg-white rounded-t shadow-lg flex p-2 flex-col ">
		<div class="flex w-full justify-between px-2">
			<img id="duck" class="hidden h-14 cursor-pointer" onclick="quack()" src="images/duck.svg"/>
			<img class="h-14 my-auto py-2" src="images/logo"/>

			<img id="menuImg" onclick="showMenu()" src="images/menu.svg#menu" class="w-8 my-auto cursor-pointer transform duration-200"/>
		</div>
	</div>

	

	<div id="settings" class="flex flex-col flex-grow w-full bg-white rounded-b shadow-lg p-2 px-4 overflow-auto">

		<div id="devices" class="flex flex-row justify-between w-full bg-white space-x-2 -translate-y-96 transform duration-200 h-0">

		<div class="flex flex-col w-1/2">
			<h2 class="">Sources: </h2>
			<ul id="inputs" class="">

			</ul>
			
		</div>

		<div class="flex flex-col w-1/2">
			<h2 class="">Zones: </h2>
			<ul id="destinations" class="">

			</ul>
		</div>

	</div>

		<span class="flex flex-col space-y-4">
			<span class="flex flex-row space-x-2 justify-between">
				<label>Device Name:</label>
				<input type="text" id="name" name="name" class="font-bold w-64 text-right" value="<%= config.device.name%>">
			</span>

			<span class="flex flex-row space-x-2 justify-between">
				<label class="" >Logo:</label>
				<input type="file" id="logo" name="logo" class="font-bold w-64">
			</span>
			<span class="flex flex-row -space-x-2 my-auto justify-between">
				<lable class="w-1/5">Colour:</lable>
				<input id="color" type="color" name="hex" class="text-right font-bold" value="<%= config.device.color%>"/>
			</span>

			<span class="flex flex-row -space-x-2 my-auto justify-between">
				<lable class="w-1/5">DHCP:</lable>
				<div id="dhcp" class="relative inline-block w-10 mr-2 align-middle select-none transition duration-200 ease-in ">
					<input id="toggle" type="checkbox" name="toggle" class="absolute block w-6 h-6 rounded-full bg-white border-2 appearance-none cursor-pointer transform transition duration-500 translate-x-4"/>
					<span id="toggle-bg" class="toggle-label block overflow-hidden h-6 rounded-full bg-blue-100 cursor-pointer transition duration-500 blue "></span>
				</div>
				
			</span>
		

			<span id="ipDisplay" class="flex flex-row w-full justify-between">
				<lable >IP Address:</lable>
				<p><%= config.device.ip %></p>
			</span>
			<form id="staticForm" class="hidden space-y-2">
				<input id="static" type="checkbox" hidden>
				<span class="flex flex-row space-x-2 justify-between ">
					<label>IP Address:</label>
					<input id="ipAddress" type="text" name="ip" class="text-right" placeholder="10.10.0.100" value="<%= config.device.ip %>">
				</span>
				<span class="flex flex-row space-x-2 justify-between ">
					<label>Subnet: </label>
					<input id="subnet" type="text" name="subnet" class="text-right" placeholder="255.255.255.0" value="<%= config.device.subnet %>">
				</span>

				<span class="flex flex-row space-x-2 justify-between">
					<label>Router: </label>
					<input id="router" type="text" name="router" class="text-right" placeholder="10.10.0.1" value="<%= config.device.router %>">
				</span>
			</form>

			<div class="w-full flex flex-row space-x-2 justify-end">
			
			<label class="w-full">Action:</label>

			<a href="/"class="button border px-2 rounded-full text-white blue">Home</button>

			<a id="blinkSelf" class="button bg-black text-white border px-2 rounded-full text-grey-400">Blink</a>

			<a href="/spotify" class="button bg-black text-white border px-2 rounded-full text-grey-400" >Spotify</a>

			<a id="update" class="button bg-black text-white border px-2 rounded-full text-grey-400">Update</a>

			<a id="reboot" class="button bg-black text-white border px-2 rounded-full text-grey-400">Reboot</a>

			<button id="factoryreset" class="button bg-black text-white border px-2 rounded-full text-grey-400"> Reset</button>
			

			</div>

			<button id="configure" class="button border px-2 rounded-full text-white blue ">Configure</button>

		</span>
	</div>
</div>

<div class="hidden flex items-center justify-center h-screen bg-blue-100">


</div>



<script type="text/javascript">

	loadHandlers()
	loading(true)

	var socket = io();

	function loading(isLoading) {
		if (isLoading) {
			document.querySelector(".button").disabled = true;
			document.querySelector(".spinner").classList.remove("hidden");

		} else {
			document.querySelector(".button").disabled = false;
			document.querySelector(".spinner").classList.add("hidden");
		}
	}

	function toggleSettings(id, classList) {
		document.getElementById(id).classList.toggle(classList)
	}

	function blink(ip){
		var message = {
			ip : ip,
			type : 'blink'
		}
		postMessage('/forward', message)
	}


	function getInputAsOption(device){
		return $(`<option value="${device.source}" name="${device.id}"/>`).text(device.name)
	}

	function createZone(zone) {
		
		var source = zone.source ? 'Input: ' + zone.source.name : 'Input: -Mute-'

		return	$(`<li id="${zone.id}" class="bg-white shadow-lg border rounded flex flex-col p-2 m-2" />`).append(
            		$('<div class="flex flex-col space-y-2"/>').append(
              			$('<div class"w-full flex flex-row justify-between"/>').append(
              				$('<span class="font-bold" />').text(zone.name)
              			),
              			$(`<input type="range" class="w-full rounded-lg overflow-hidden appearance-none blue rounded-50 h-10" value="${zone.volume}" />`),
              			$(`<select class="rounded zoneinput zone-slider" />`) .append(getInputAsOption({
              					name : "-Mute-",
              					source : "muted"
              				}), 
              				($('<option disabled selected/>').text(`${source}`))
              			)
            		)
        		)
	}

	function createDeviceLi(device) {

		return	$('<li id="'+ device.id + '" class="bg-white shadow-lg border rounded flex flex-row p-2 my-2 md:space-x-2 justify-between sm:pr-10 md:pr-8 lg:pr-2 pr-4"/>').append(
					$('<div class="flex flex-row space-x-2"/>').append(
						$('<label />').text("Label: "),
						$(`<input type="text" class="w-full font-bold" name="${device.type}.name" value="${device.name}"/>`)
					),
					$('<div class="flex flex-row space-x-2"/>').append(
						$(`<a class="text-white rounded-full px-2 blue hidden sm:inline" value="true" name="blink" href="http://${device.ip}:5000/eq"/>`).text('EQ'),
						$(`<button class="text-white rounded-full px-2 blue hidden sm:inline" value="true" name="blink" onclick="blink('${device.id}')"/>`).text("Blink"),
						$(`<svg class="h-8 w-8 cursor-pointer fill-current blue-fill" onclick="window.location.href='http://${device.ip}:5000/settings'" src="images/gear.svg"><use xlink:href="images/gear.svg#gear"/></svg>`)
					)
				)
	}


	function updateDevices(devices) {
		$('#zones').html('')
		$('#destinations').html('')
		$('#inputs').html('')

		var rxDevices = []
		var txDevices = []
		
		for (device of devices) {
			if (device.rx) {
				var rx = device.rx
				rx.source = device.source
				rx.ip = device.device.ip
				rx.id = device.device.id
				rxDevices.push(rx)
			}
			if (device.tx) {
				var tx = device.tx
				tx.ip = device.device.ip
				tx.id = device.device.id
				txDevices.push(tx)
			}

			if (device.player) {
				var player = device.player
				player.ip = device.device.ip
				player.id = device.device.id
				txDevices.push(player)
			}
		}
		
		for (rx of rxDevices) {
			var zone = createZone(rx)
			var li = createDeviceLi(rx)
			$('#zones').append(zone)
			$('#destinations').append(li)
		}
			
		for (tx of txDevices) {
			var li = createDeviceLi(tx)
			$('#inputs').append(li)
			$('.zoneinput').append(getInputAsOption(tx))
		}

		loadHandlers()
		loading(false)
		
	}

	let showMenu = () => {
		document.getElementById('devices').classList.toggle('-translate-y-96')
		document.getElementById('devices').classList.toggle('h-0')
		document.getElementById('devices').classList.toggle('pb-4')
		document.getElementById('menuImg').classList.toggle('-rotate-90')

		let open = document.getElementById('menuImg').src == 'http://localhost:5000/images/menu.svg#menu'

		if(open){
			document.getElementById('menuImg').src ='images/menuopen.svg#menu'
		} else {
			document.getElementById('menuImg').src ='images/menu.svg#menu'
		}
	}

	// listens for new config
	socket.on("newConfig", (config) => {
		loading(true)
		setTimeout(function(){
			window.location.href = "http://" + config + ":5000"
		}, 2000);
	})

	$('#dhcp').on("click" , function(){
		$('#toggle').toggleClass("translate-x-4")
		$('#toggle-bg').toggleClass("blue")
		$('#staticForm').toggleClass("hidden")
		$('#ipDisplay').toggleClass("hidden")
	})


	let debounce = (callback, delay) =>{
		let interval;
		return (...args) => {
			clearTimeout(interval)
			interval = setTimeout(() => {
				callback(...args)
				interval = null
			},delay)
		}
	}


	let updateInterval =  <%= updateInterval %>;
	let readyState = true
	let localDeviceListJSON = []

	let readyStateFalse = () => {
		readyState = false
	}
	let readyStateTrue = () => {
		readyState = true
	}
	let debouncedReadyStateTrue = debounce( () => readyStateTrue() , updateInterval * 2 )

	let readyStateToggle = () => {
		readyStateFalse()
		debouncedReadyStateTrue()
	}

	let handleDevices = (message) => {
		let messageJSON = JSON.stringify(message)
		let localJSON = localDeviceListJSON

		if(messageJSON == localJSON){
			readyStateToggle()
		}

		if(readyState){
			localDeviceListJSON = messageJSON
			updateDevices(JSON.parse(localDeviceListJSON))
		}
	}
	
	socket.on('devices', handleDevices)

let postMessage = async (url, message) => {
	readyStateToggle()
	let res = await fetch( url , {
        method:'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(message) 
      })

      let response = await res.json()  

      if(response.successful) {
      }
}

function loadHandlers(){

	$('input[type=text]').on('keyup', function () {

		var message = {
			ip : this.closest('li').id,
			type : this.name, 
			value : this.value
		}

		postMessage('/forward', message)
	})

	$('#blinkSelf').on("click" , function(){
		blink('<%= config.device.ip %>')
	})

	$('#configure').on("click" , function() {
		loading(true)

		let data = new FormData()
		data.append('file', document.getElementById('logo').files[0] )
		data.append('name', $('#name').val())
		data.append('ip', $('#ipAddress').val())
		data.append('dhcp', $('#toggle').val())
		data.append('subnet', $('#subnet').val())
		data.append('router', $('#router').val())
		data.append('color', $('#color').val())

		let xhr = new XMLHttpRequest()
		xhr.open('POST', '/configure')
		
		xhr.onload = () => {
			location.reload()
		}

		xhr.send( data )

	})

	$('#reboot').on("click" , function() {
		postMessage('/reboot')
		loading(true)
	})
	$('#factoryreset').on("click" , function() {
		postMessage('/factoryreset')
		loading(true)
	})

	$('#update').on("click" , function() {
		let xhr = new XMLHttpRequest()
		xhr.open('POST', '/update')
		xhr.send()
		loading(true)
	})


	$('#duck').on('mousedown' , function (){

		let timeout = setTimeout( function (){
			window.location.href = '/'
		}, 1000)

		$('#duck').on('mouseup' , function (){
			clearTimeout(timeout)
			quack()
		})
		
	})

}

</script>